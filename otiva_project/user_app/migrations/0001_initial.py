# Generated by Django 3.2.12 on 2022-05-29 14:10

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OtivaUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('PO', 'ЧЛ - Владелец техники'), ('PS', 'ЧЛ - Сервисный инженер'), ('CO', 'ЮЛ - Владелец техники'), ('CS', 'ЮЛ - Сервисный центр')], default='PO', max_length=2)),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/', verbose_name='Аватар пользователя')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email')),
                ('activation_key', models.CharField(blank=True, max_length=128)),
                ('activation_key_expires', models.DateTimeField(default=datetime.datetime(2022, 5, 31, 14, 10, 21, 299760, tzinfo=utc))),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.CharField(max_length=100, null=True, verbose_name='Регион')),
                ('country', models.CharField(max_length=100, null=True, verbose_name='Страна')),
                ('city', models.CharField(max_length=100, null=True, verbose_name='Город')),
                ('post', models.CharField(blank=True, max_length=10, null=True, verbose_name='Почтовый индекс')),
                ('street', models.CharField(max_length=100, null=True)),
                ('building', models.CharField(max_length=5, null=True, verbose_name='Строение')),
                ('room', models.CharField(max_length=5, null=True, verbose_name='Номер квартиры')),
                ('metro', models.CharField(blank=True, max_length=50, null=True)),
                ('map_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на карту')),
                ('corporate_phone', models.CharField(blank=True, default='', max_length=15, null=True, verbose_name='Корпоративный номер телефона')),
                ('office', models.CharField(blank=True, default='', max_length=5, null=True, verbose_name='Номер офиса')),
                ('time', models.CharField(blank=True, default='', max_length=30, null=True, verbose_name='Рабочее время')),
                ('liter', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Литeра')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rem', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('phone_num', models.CharField(blank=True, max_length=20, null=True, verbose_name='номер телефона')),
                ('working_position', models.CharField(blank=True, max_length=200, null=True, verbose_name='Должность')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_app.role')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='otivauser',
            name='address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_app.address'),
        ),
        migrations.AddField(
            model_name='otivauser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='otivauser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
